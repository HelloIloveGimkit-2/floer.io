import { AssetsDrawer } from "@/assets/asset.ts";
import { RenderContainer } from "@/scripts/utils/renderContainer.ts";
import { P2 } from "@common/utils/math.ts";

export interface PathLoader {
    containerToDraw: RenderContainer,
    pathS: string,
    scale?: number,
    fill?: string,
    stroke?: {
        width: number,
        color: string
    }
}

function loadPath(
    loader: PathLoader
) {
    const { containerToDraw, pathS } = loader;
    let { ctx, radius } = containerToDraw;
    const path = new Path2D(pathS)
    radius *= loader.scale ?? 1

    if (loader.fill) ctx.fillStyle = containerToDraw.getRenderColor(loader.fill);
    if (loader.stroke) {
        ctx.strokeStyle = containerToDraw.getRenderColor(loader.stroke.color);
        ctx.lineWidth = loader.stroke.width;
    }
    ctx.beginPath();
    const offset = radius;
    const scale = radius / 100;
    ctx.translate(-offset, -offset)
    ctx.scale(scale, scale)

    if (loader.fill) ctx.fill(path);
    if (loader.stroke) ctx.stroke(path);

    ctx.scale(1 / scale, 1 / scale);
    ctx.translate(offset, offset)
}

export const petalAssets: { [K: string]: AssetsDrawer } = {
    "basic": (containerToDraw) => {
        const { ctx, radius } = containerToDraw;

        ctx.beginPath();

        ctx.fillStyle = containerToDraw.getRenderColor("#FFFFFF");
        ctx.lineWidth = 2.5;
        ctx.strokeStyle = containerToDraw.getRenderColor("#CFCFCF");

        ctx.arc(0, 0, radius, 0, Math.PI * 2);
        ctx.fill();
        ctx.stroke();
    },
    "wing": (containerToDraw) => {
        loadPath({
            containerToDraw,
            pathS: "m 174.67412,9.7967501 q 1.2984,2.0207459 2.49622,4.1054969 1.19781,2.084751 2.29505,4.224364 1.09267,2.144185 2.08018,4.334088 0.98751,2.194474 1.86988,4.434667 0.88236,2.240193 1.64585,4.512389 0.7635,2.272196 1.42641,4.594682 0.66291,2.322486 1.19782,4.658687 0.5349,2.336201 0.96922,4.708977 0.43433,2.372776 0.7315,4.754695 0.31088,2.377348 0.5029,4.777555 0.19201,2.400207 0.26516,4.800413 0.0777,2.404779 0.032,4.809558 -0.0457,2.404776 -0.20573,4.809556 -0.16001,2.40478 -0.43889,4.7867 -0.27888,2.38192 -0.67663,4.76384 -0.39775,2.3682 -0.9098,4.71812 -0.51204,2.35449 -1.14295,4.6724 -0.62177,2.32249 -1.3624,4.61297 -0.74064,2.29048 -1.591,4.53525 -0.85036,2.24476 -1.81501,4.452952 -0.96008,2.20819 -2.02532,4.36152 -1.06981,2.15333 -2.24019,4.2518 -1.17496,2.10304 -2.44593,4.14207 -1.27554,2.03903 -2.65165,4.01406 -1.37612,1.97503 -2.83453,3.88605 -1.45842,1.91102 -3.02655,3.7306 -1.56814,1.81959 -3.20942,3.58431 -1.64128,1.76473 -3.37858,3.41973 -1.73729,1.655 -3.54316,3.25513 -1.80587,1.60014 -3.69403,3.07227 -1.88816,1.47213 -3.8449,2.88939 -1.95674,1.41727 -3.98206,2.69738 -2.02532,1.28011 -4.11007,2.49621 -2.08475,1.21611 -4.22436,2.29506 -2.14419,1.09723 -4.33409,2.08018 -2.19448,0.98751 -4.43467,1.86987 -2.23562,0.87779 -4.51239,1.64586 -2.28134,0.77263 -4.59468,1.42641 -2.31334,0.65834 -4.65412,1.19781 -2.34534,0.54405 -4.70897,0.96923 -2.36821,0.42518 -4.7547,0.73149 -2.38649,0.31088 -4.78212,0.5029 -2.40021,0.19202 -4.80042,0.26517 -2.40478,0.0777 -4.80955,0.032 -2.40478,-0.0457 -4.80042,-0.20573 -2.39563,-0.16002 -4.79127,-0.4389 -2.39563,-0.27888 -4.76384,-0.67663 -2.3682,-0.39775 -4.71812,-0.90979 -2.34992,-0.51204 -4.6724,-1.13838 -2.322487,-0.62634 -4.61297,-1.36698 -2.285911,-0.74063 -4.535248,-1.59099 -2.249336,-0.85036 -4.452955,-1.81502 -2.20819,-0.96008 -4.361518,-2.02531 -2.153329,-1.06981 -4.251795,-2.2402 -2.103039,-1.17496 -4.142071,-2.44592 -2.039033,-1.27554 -4.014061,-2.64709 -1.975027,-1.37154 -3.881477,-2.8391 -1.90645,-1.46755 -3.735179,-3.02655 -1.828729,-1.55899 -3.584309,-3.20941 -1.755579,-1.65043 -3.419723,-3.37858 -1.664143,-1.72815 -3.250566,-3.54316 -1.586422,-1.81045 -3.076836,-3.69404 -1.490414,-1.88359 -2.889392,-3.8449 -1.394406,-1.95674 -2.6973753,-3.98206 Q 127.52034,117.68719 174.66955,9.7967501",
            fill: "#FFFFFF",
            stroke: {
                color: "#CFCFCF",
                width: containerToDraw.radius * 1.5
            }
        })
    },
    "faster_wing": (containerToDraw) => {
        loadPath({
            containerToDraw,
            pathS: "m 174.67412,9.7967501 q 1.2984,2.0207459 2.49622,4.1054969 1.19781,2.084751 2.29505,4.224364 1.09267,2.144185 2.08018,4.334088 0.98751,2.194474 1.86988,4.434667 0.88236,2.240193 1.64585,4.512389 0.7635,2.272196 1.42641,4.594682 0.66291,2.322486 1.19782,4.658687 0.5349,2.336201 0.96922,4.708977 0.43433,2.372776 0.7315,4.754695 0.31088,2.377348 0.5029,4.777555 0.19201,2.400207 0.26516,4.800413 0.0777,2.404779 0.032,4.809558 -0.0457,2.404776 -0.20573,4.809556 -0.16001,2.40478 -0.43889,4.7867 -0.27888,2.38192 -0.67663,4.76384 -0.39775,2.3682 -0.9098,4.71812 -0.51204,2.35449 -1.14295,4.6724 -0.62177,2.32249 -1.3624,4.61297 -0.74064,2.29048 -1.591,4.53525 -0.85036,2.24476 -1.81501,4.452952 -0.96008,2.20819 -2.02532,4.36152 -1.06981,2.15333 -2.24019,4.2518 -1.17496,2.10304 -2.44593,4.14207 -1.27554,2.03903 -2.65165,4.01406 -1.37612,1.97503 -2.83453,3.88605 -1.45842,1.91102 -3.02655,3.7306 -1.56814,1.81959 -3.20942,3.58431 -1.64128,1.76473 -3.37858,3.41973 -1.73729,1.655 -3.54316,3.25513 -1.80587,1.60014 -3.69403,3.07227 -1.88816,1.47213 -3.8449,2.88939 -1.95674,1.41727 -3.98206,2.69738 -2.02532,1.28011 -4.11007,2.49621 -2.08475,1.21611 -4.22436,2.29506 -2.14419,1.09723 -4.33409,2.08018 -2.19448,0.98751 -4.43467,1.86987 -2.23562,0.87779 -4.51239,1.64586 -2.28134,0.77263 -4.59468,1.42641 -2.31334,0.65834 -4.65412,1.19781 -2.34534,0.54405 -4.70897,0.96923 -2.36821,0.42518 -4.7547,0.73149 -2.38649,0.31088 -4.78212,0.5029 -2.40021,0.19202 -4.80042,0.26517 -2.40478,0.0777 -4.80955,0.032 -2.40478,-0.0457 -4.80042,-0.20573 -2.39563,-0.16002 -4.79127,-0.4389 -2.39563,-0.27888 -4.76384,-0.67663 -2.3682,-0.39775 -4.71812,-0.90979 -2.34992,-0.51204 -4.6724,-1.13838 -2.322487,-0.62634 -4.61297,-1.36698 -2.285911,-0.74063 -4.535248,-1.59099 -2.249336,-0.85036 -4.452955,-1.81502 -2.20819,-0.96008 -4.361518,-2.02531 -2.153329,-1.06981 -4.251795,-2.2402 -2.103039,-1.17496 -4.142071,-2.44592 -2.039033,-1.27554 -4.014061,-2.64709 -1.975027,-1.37154 -3.881477,-2.8391 -1.90645,-1.46755 -3.735179,-3.02655 -1.828729,-1.55899 -3.584309,-3.20941 -1.755579,-1.65043 -3.419723,-3.37858 -1.664143,-1.72815 -3.250566,-3.54316 -1.586422,-1.81045 -3.076836,-3.69404 -1.490414,-1.88359 -2.889392,-3.8449 -1.394406,-1.95674 -2.6973753,-3.98206 Q 127.52034,117.68719 174.66955,9.7967501",
            fill: "#feffc9",
            stroke: {
                color: "#cfd0a4",
                width: containerToDraw.radius * 1.5
            }
        })
    },
    "faster": (containerToDraw) => {
        const { ctx, radius } = containerToDraw;

        ctx.beginPath();

        ctx.fillStyle = containerToDraw.getRenderColor("#feffc9");
        ctx.lineWidth = 2.5;
        ctx.strokeStyle = containerToDraw.getRenderColor("#cfd0a4");

        ctx.arc(0, 0, radius, 0, Math.PI * 2);
        ctx.fill();
        ctx.stroke();
    },
    "fang": (containerToDraw) => {
        loadPath({
            containerToDraw,
            pathS: "M 157.99156,187.93825 89.540758,154.98463 q -1.350559,-0.29825 -2.678608,-0.6584 -1.333677,-0.36015 -2.65047,-0.78783 -1.316795,-0.42205 -2.605453,-0.91163 -1.294285,-0.48394 -2.560434,-1.03542 -1.266148,-0.5571 -2.50416,-1.17049 -1.238012,-0.61338 -2.44226,-1.28302 -1.204248,-0.66966 -2.380359,-1.40684 -1.176111,-0.73717 -2.307204,-1.51938 -1.131092,-0.78782 -2.228421,-1.63192 -1.091702,-0.8441 -2.144012,-1.73884 -1.05231,-0.89475 -2.059601,-1.84014 -1.007292,-0.94539 -1.963937,-1.94143 -0.956645,-0.99604 -1.868272,-2.03709 -0.911628,-1.04105 -1.766982,-2.1215 -0.855353,-1.08045 -1.654433,-2.20591 -0.799081,-1.12547 -1.553143,-2.29033 -0.742806,-1.15923 -1.434968,-2.36347 -0.686534,-1.193 -1.316794,-2.41975 -0.63026,-1.23802 -1.192993,-2.49291 -0.568361,-1.26052 -1.074819,-2.54356 -0.50646,-1.28864 -0.945392,-2.59419 -0.444558,-1.31117 -0.821589,-2.64485 -0.377031,-1.32242 -0.686534,-2.67297 -0.309503,-1.34494 -0.557106,-2.70112 -0.241975,-1.36181 -0.422049,-2.72925 -0.174447,-1.37307 -0.286993,-2.75177 -0.112547,-1.37306 -0.151938,-2.75738 -0.04502,-1.3787 -0.01689,-2.757395 0.02251,-1.384322 0.112547,-2.757389 0.09566,-1.384323 0.258856,-2.757391 0.157566,-1.36744 0.388286,-2.729253 0.225093,-1.36744 0.517713,-2.712371 L 45.062367,12.061786 113.51316,45.01541 q 1.35057,0.298249 2.67861,0.658398 1.33368,0.360149 2.65047,0.787826 1.3168,0.42205 2.60546,0.911627 1.29428,0.489577 2.56043,1.041055 1.26615,0.551478 2.50417,1.164857 1.238,0.613378 2.44226,1.28303 1.20424,0.669652 2.38035,1.406832 1.17611,0.737179 2.3072,1.519378 1.1311,0.782198 2.22843,1.631925 1.09733,0.849726 2.14401,1.74447 1.05231,0.889119 2.0596,1.834509 1.00729,0.951018 1.96394,1.941428 0.95664,0.996037 1.86827,2.037093 0.906,1.041055 1.76698,2.121502 0.85536,1.086074 1.65444,2.211539 0.8047,1.125465 1.55314,2.284694 0.7428,1.164857 1.43497,2.363477 0.68653,1.192994 1.31679,2.419751 0.63026,1.238012 1.193,2.492905 0.56835,1.260522 1.07481,2.549179 0.50646,1.283031 0.9454,2.588571 0.44456,1.311167 0.82159,2.644844 0.37703,1.333675 0.68653,2.67298 0.3095,1.339304 0.55711,2.701116 0.24759,1.361813 0.42205,2.734881 0.17444,1.36744 0.28699,2.746135 0.11255,1.373068 0.15193,2.757391 0.045,1.378694 0.0169,2.757387 -0.0225,1.38433 -0.11254,2.76302 -0.0956,1.37869 -0.25886,2.75177 -0.16319,1.37306 -0.38828,2.73487 -0.2251,1.36182 -0.51771,2.71238 z",
            fill: "#9c1010",
            stroke: {
                color: "#7e0d0d",
                width: containerToDraw.radius * 2
            }
        })
    },
    "epic_rose": (containerToDraw) => {
        const { ctx, radius } = containerToDraw;
        const centerX = 0;
        const centerY = 0;
        const angleOffset = -Math.PI / 2;

        ctx.save();
        ctx.translate(centerX, centerY);

        const points = [];
        for (let i = 0; i < 3; i++) {
            const angle = angleOffset + (i * 2 * Math.PI) / 3;
            points.push({
                x: radius * Math.cos(angle),
                y: radius * Math.sin(angle)
            });
        }


        ctx.fillStyle = containerToDraw.getRenderColor("#ff94c9");
        ctx.strokeStyle = containerToDraw.getRenderColor("#d37ba6");
        ctx.lineWidth = 2;
        ctx.lineJoin = "round";

        ctx.beginPath();
        for (let i = 0; i < 3; i++) {
            const startPoint = points[i];
            const endPoint = points[(i + 1) % 3];
            const controlPoint = points[(i + 2) % 3];

            const startAngle = Math.atan2(
                startPoint.y - controlPoint.y,
                startPoint.x - controlPoint.x
            );
            const endAngle = Math.atan2(
                endPoint.y - controlPoint.y,
                endPoint.x - controlPoint.x
            );

            ctx.arc(
                controlPoint.x,
                controlPoint.y,
                radius * 2 * Math.sin(Math.PI/3),
                startAngle,
                endAngle,
                false
            );
        }

        ctx.closePath();
        ctx.fill();
        ctx.stroke();

        ctx.restore();
    },
    "egg": (containerToDraw) => {
        const { ctx, radius } = containerToDraw;

        ctx.beginPath();

        ctx.fillStyle = containerToDraw.getRenderColor("#fff0b8");
        ctx.lineWidth = 2.5;
        ctx.strokeStyle = containerToDraw.getRenderColor("#cfc295");

        ctx.ellipse(
            0, 0,
            radius * 0.7,
            radius,
            0,
            0, Math.PI * 2
        );
        ctx.fill();
        ctx.stroke();
    },
    "dice": (containerToDraw) => {
        const { ctx, radius } = containerToDraw;
        ctx.beginPath();
        ctx.fillStyle = containerToDraw.getRenderColor("#ffffff");
        ctx.strokeStyle = containerToDraw.getRenderColor("#cfcfcf");
        ctx.rect(
            -radius / 2,
            -radius / 2,
            radius,
            radius
        )
        ctx.fill()
        ctx.stroke()

        ctx.beginPath()
        ctx.fillStyle = "#777777"
        ctx.arc(
            0, 0,
            radius * 0.15, 0, P2
        )
        ctx.fill()
    },
    "dandelion": (containerToDraw) => {
        const { ctx, radius } = containerToDraw;
        ctx.beginPath();
        ctx.fillStyle = containerToDraw.getRenderColor("#333333");

        ctx.roundRect(
            -radius * 0.5,
            -radius * 0.3,
            radius,
            radius * 0.6,
            1.5
        )
        ctx.fill()

        ctx.beginPath();
        ctx.fillStyle = containerToDraw.getRenderColor("#ffffff");
        ctx.strokeStyle = containerToDraw.getRenderColor("#cfcfcf");
        ctx.lineWidth = 2;
        ctx.arc(
            radius * 0.65,
            0,
            radius * 0.6,
            0, P2
        )
        ctx.fill()
        ctx.stroke()
    },
    "corn": (containerToDraw) => {
        loadPath({
            containerToDraw,
            pathS: "M 9.6991664,129.23822 Q 35.501351,-52.012337 146.82071,41.751316 258.14008,135.51497 83.913413,191.74999 84.312943,115.96556 9.6991664,129.23822",
            fill: "#ffe419",
            stroke: {
                color: "#d2b61c",
                width: 20
            }
        })
    },
    "chip": (containerToDraw) => {
        const { ctx, radius } = containerToDraw;

        ctx.beginPath();

        ctx.fillStyle = containerToDraw.getRenderColor("#FFFFFF");
        ctx.lineWidth = 3;
        ctx.strokeStyle = containerToDraw.getRenderColor("#CFCFCF");

        ctx.arc(0, 0, radius, 0, Math.PI * 2);
        ctx.fill();
        ctx.stroke();

        ctx.save()

        for (let i = 0; i < 6; i++) {
            ctx.beginPath();

            ctx.fillStyle = containerToDraw.getRenderColor("#465fcf");

            ctx.rect(
                radius * 0.7,
                -radius * 0.2,
                radius * 0.2,
                radius * 0.4,
            );

            ctx.fill();

            ctx.rotate(P2 / 6)
        }

        ctx.restore();

        ctx.save()

        for (let i = 0; i < 10; i++) {
            ctx.beginPath();

            ctx.fillStyle = containerToDraw.getRenderColor("#465fcf");

            ctx.rect(
                radius * 0.45,
                -radius * 0.075,
                radius * 0.1,
                radius * 0.15,
            );

            ctx.fill();

            ctx.rotate(P2 / 10)
        }

        ctx.restore();
    },
    "cactus": (containerToDraw) => {
        loadPath({
            containerToDraw,
            pathS: "m 190.9104,100.00044 q -28.83584,25.7134 -26.62977,64.28139 Q 125.71264,162.07576 99.999241,190.9116 74.290071,162.07576 35.717846,164.28183 37.923913,125.71384 9.0880745,100.00044 37.923913,74.291273 35.717846,35.719044 74.285831,37.925111 99.999241,9.0935154 125.7084,37.925111 164.28063,35.719044 162.07456,74.287031 190.9104,100.00044",
            fill: "#2da14d",
            stroke: {
                width: 5,
                color: "#2da14d"
            }
        })

        loadPath({
            containerToDraw,
            pathS: "m 190.9104,100.00044 q -28.83584,25.7134 -26.62977,64.28139 Q 125.71264,162.07576 99.999241,190.9116 74.290071,162.07576 35.717846,164.28183 37.923913,125.71384 9.0880745,100.00044 37.923913,74.291273 35.717846,35.719044 74.285831,37.925111 99.999241,9.0935154 125.7084,37.925111 164.28063,35.719044 162.07456,74.287031 190.9104,100.00044",
            fill: "#38c75f"
        })

        const { ctx, radius } = containerToDraw;

        ctx.beginPath();
        ctx.fillStyle = containerToDraw.getRenderColor("#73d78f");
        ctx.arc(
            0, 0,
            radius * 0.5, 0, P2
        )

        ctx.fill()
    },
    "bubble": (containerToDraw) => {
        const { ctx, radius } = containerToDraw;

        ctx.beginPath();
        ctx.fillStyle = containerToDraw.getRenderColor("#ffffff");
        ctx.strokeStyle = containerToDraw.getRenderColor("#ffffff");
        ctx.lineWidth = 4;
        ctx.globalAlpha = containerToDraw.getAlpha(0.3);
        ctx.arc(
            0, 0,
            radius, 0, P2
        )
        ctx.fill()

        ctx.globalAlpha = containerToDraw.getAlpha(0.5);
        ctx.stroke();

        ctx.globalAlpha = containerToDraw.getAlpha(0.6);
        ctx.beginPath()
        ctx.arc(
            radius * 0.4, -radius * 0.4,
            radius * 0.4, 0, P2
        )
        ctx.fill()

        ctx.globalAlpha = 1;
    },
    "bone": (containerToDraw) => {
        loadPath({
            containerToDraw,
            pathS: "m 103.21408,40.875459 q 9.9628,51.723596 52.84818,82.306401 l -7.82684,10.97418 0.2302,-13.47621 q 20.17469,0.3472 29.76767,13.46489 8.89105,12.16294 4.14362,27.23169 -4.6795,14.84609 -18.43875,19.73693 -15.52916,5.52106 -30.6545,-6.66452 l 8.45706,-10.49869 13.06109,-3.32093 q 4.78894,18.82744 -6.69093,30.64696 -10.17414,10.47605 -25.62405,8.55518 -15.67633,-1.95482 -23.035217,-15.10271 -7.936289,-14.18191 0.143395,-32.66971 l 12.347852,5.39651 -13.234693,2.55109 Q 88.745361,108.28293 45.85999,77.700121 L 53.686835,66.729708 53.456633,80.202144 Q 33.281942,79.854956 23.688963,66.737255 14.797909,54.574324 19.545339,39.505573 24.224842,24.659476 37.984086,19.768642 53.51324,14.247584 68.638597,26.436931 L 60.18153,36.928073 47.120437,40.24901 Q 42.331495,21.425336 53.81137,9.6058188 63.985512,-0.87022663 79.435416,1.0544063 95.111751,3.0054568 102.47065,16.149575 q 7.93627,14.185683 -0.14341,32.67349 L 89.97939,43.426542 Z m -26.469378,5.098393 q -0.3887,-2.007657 -0.162273,-4.037957 0.226428,-2.034074 1.045341,-3.905874 2.71713,-6.215436 1.320827,-8.713686 -0.698152,-1.245352 -2.849213,-1.513291 -2.124644,-0.264165 -2.951105,0.581164 -0.977412,1.007603 0.09435,5.222928 0.3887,1.520838 0.415118,3.09451 0.02642,1.566123 -0.309451,3.098282 -0.332095,1.535935 -1.011377,2.951106 -0.679283,1.415172 -1.660468,2.637881 -0.415117,0.513235 -0.879294,0.984959 -0.464176,0.471724 -0.973639,0.898163 -0.509461,0.426438 -1.056661,0.796269 -0.543426,0.37738 -1.12459,0.690605 -0.581164,0.316998 -1.192518,0.57739 -0.607581,0.260392 -1.241577,0.452855 -0.630223,0.200011 -1.279316,0.339641 -0.649092,0.132083 -1.305731,0.203784 -0.660415,0.06793 -1.320828,0.07548 -0.660414,0.0075 -1.320827,-0.05283 -0.660413,-0.06038 -1.309506,-0.181143 -0.652866,-0.124534 -1.286863,-0.313224 -0.633998,-0.184916 -1.249126,-0.433986 -0.615128,-0.245296 -1.200065,-0.554747 -0.588712,-0.301903 -1.143459,-0.667962 -0.550974,-0.362283 -1.067983,-0.777401 -3.388865,-2.732225 -4.709693,-2.260501 -1.113268,0.396249 -1.758586,2.441643 -0.649093,2.064264 0.192463,3.219045 1.690659,2.30956 8.468389,2.426548 2.045395,0.03397 3.988898,0.675508 1.943503,0.641546 3.607745,1.826517 51.663196,36.84353 63.663856,99.152602 0.38871,2.00766 0.16228,4.03796 -0.22642,2.03784 -1.04535,3.90964 -2.71712,6.21544 -1.32082,8.70992 0.69815,1.24534 2.84922,1.51329 2.12464,0.26416 2.9511,-0.58117 0.97742,-1.0076 -0.0944,-5.22293 -0.3887,-1.52083 -0.41512,-3.09073 -0.0265,-1.56991 0.30946,-3.10206 0.33587,-1.53216 1.01137,-2.94733 0.67929,-1.41895 1.66047,-2.64166 0.41511,-0.51323 0.87929,-0.98496 0.46418,-0.47172 0.97365,-0.89816 0.50945,-0.42644 1.05665,-0.79627 0.54343,-0.3736 1.1246,-0.69061 0.58116,-0.31699 1.19251,-0.57738 0.61136,-0.26039 1.24158,-0.45285 0.63022,-0.20002 1.27932,-0.33588 0.64909,-0.13585 1.30573,-0.20378 0.65664,-0.0679 1.32083,-0.0754 0.66041,-0.008 1.32082,0.0491 0.66042,0.0604 1.3095,0.18491 0.65287,0.12076 1.28687,0.30946 0.634,0.18869 1.24912,0.43398 0.61513,0.2453 1.20007,0.55475 0.58871,0.30568 1.14346,0.66797 0.55098,0.36227 1.06798,0.7774 3.38887,2.73222 4.7097,2.26427 1.11326,-0.40003 1.75859,-2.44542 0.64908,-2.06426 -0.19248,-3.21905 -1.69064,-2.30955 -8.46838,-2.42276 -2.04539,-0.0377 -3.9889,-0.67929 -1.9435,-0.64154 -3.60774,-1.82652 Q 88.745361,108.28293 76.744702,45.973852",
            fill: "#cfcfcf",
        })
        loadPath({
            containerToDraw,
            pathS: "m 89.97939,43.426542 q 10.98174,57.014448 58.25603,90.725728 c 38.87006,0.66796 20.05392,51.18772 -6.4947,29.79409 8.40424,33.04709 -45.364752,29.13367 -29.79786,-6.49093 Q 100.96113,100.44099 53.686835,66.729708 C 14.816778,66.057972 33.632904,15.538221 60.18153,36.931847 51.777296,3.8847504 105.54628,7.8019463 89.97939,43.422768",
            fill: "#ffffff"
        })
    },
    "blood_stinger": (containerToDraw) => {
        loadPath({
            containerToDraw,
            pathS: "m 169.43507,100.00194 q -74.064074,32.06974 -138.870134,80.17434 9.25801,-80.17434 0,-160.348676 64.80606,48.104611 138.870134,80.174336",
            fill: "#9c1010",
            stroke: {
                width: containerToDraw.radius * 2,
                color: "#7e0d0d"
            }
        })
    },
    "antennae": (containerToDraw) => {
        loadPath({
            containerToDraw,
            pathS: "m 60.348807,176.48637 q 0.224848,0.67878 0.551515,1.30666 0.326666,0.63637 0.750908,1.20485 0.42,0.57273 0.924848,1.07333 0.509091,0.50061 1.081818,0.91637 0.576969,0.41575 1.213332,0.73818 0.636363,0.32242 1.310908,0.53879 0.674545,0.21636 1.378787,0.3309 0.704247,0.11455 1.412727,0.11031 0.44545,0 0.89091,-0.0424 0.44545,-0.0424 0.88242,-0.13151 0.43697,-0.0891 0.86546,-0.22061 0.42424,-0.12727 0.84,-0.29697 0.41151,-0.16969 0.80606,-0.38182 0.39454,-0.21212 0.76363,-0.45818 0.36909,-0.24606 0.72121,-0.53454 0.3394,-0.28 0.65758,-0.59394 0.31818,-0.31394 0.60242,-0.66606 0.28424,-0.35212 0.5303,-0.71697 0.24606,-0.36909 0.45819,-0.76364 0.21212,-0.39454 0.38181,-0.80606 0.1697,-0.41151 0.29697,-0.84 0.13152,-0.42424 0.22061,-0.86545 0.0891,-0.44121 0.12727,-0.88242 0.0382,-0.44122 0.0467,-0.89091 0,-94.673869 -63.267231,-157.945342 Q 14.29311,15.168332 13.720383,14.748333 13.143414,14.332575 12.511293,14.005909 11.87493,13.683485 11.200385,13.462879 10.52584,13.242273 9.8258412,13.123485 9.1258411,13.004697 8.4131141,13.00894 q -0.712726,0 -1.416968,0.101818 -0.7,0.110303 -1.378787,0.322424 -0.678788,0.212121 -1.315151,0.534545 -0.398788,0.199394 -0.776363,0.436969 -0.381818,0.237576 -0.729697,0.509091 -0.356363,0.275757 -0.678787,0.585454 -0.322424,0.305455 -0.615151,0.644848 -0.29697,0.339394 -0.55151497,0.7 -0.258788,0.364848 -0.479394,0.755151 -0.22060503,0.381818 -0.40303003,0.793333 -0.182424,0.407272 -0.322424,0.831514 -0.144242,0.424242 -0.241818,0.861212 -0.09757,0.432727 -0.156969,0.878181 -0.05515,0.441212 -0.06788,0.890908 -0.0085,0.445455 0.02121,0.890909 0.0297,0.445454 0.106061,0.882424 0.07636,0.436969 0.195151,0.873938 0.118788,0.43697 0.275757,0.848485 0.15697,0.411514 0.360606,0.814545 Q 30.253097,86.194951 60.353076,176.49064 m 77.852674,-0.004 q -0.22484,0.67878 -0.55151,1.30666 -0.32667,0.63637 -0.75091,1.20485 -0.42,0.57273 -0.92485,1.07333 -0.50909,0.50061 -1.08181,0.91637 -0.57697,0.41575 -1.21334,0.73818 -0.63636,0.32242 -1.31091,0.53879 -0.67454,0.21636 -1.37878,0.3309 -0.70424,0.11455 -1.41273,0.11031 -0.44545,0 -0.89091,-0.0424 -0.44545,-0.0424 -0.88242,-0.13151 -0.43697,-0.0891 -0.86545,-0.22061 -0.42425,-0.12727 -0.84,-0.29697 -0.41152,-0.16969 -0.80606,-0.38182 -0.39455,-0.21212 -0.76364,-0.45818 -0.36909,-0.24606 -0.72121,-0.53454 -0.3394,-0.28 -0.65758,-0.59394 -0.31818,-0.31394 -0.60242,-0.66606 -0.28424,-0.35212 -0.5303,-0.71697 -0.24606,-0.36909 -0.45818,-0.76364 -0.21213,-0.39454 -0.38182,-0.80606 -0.1697,-0.41151 -0.29697,-0.84 -0.13152,-0.42424 -0.22061,-0.86545 -0.0891,-0.44121 -0.12727,-0.88242 -0.0382,-0.44122 -0.0467,-0.89091 0,-94.673869 63.26723,-157.945342 0.50485,-0.500606 1.07758,-0.920605 0.57697,-0.415758 1.20909,-0.742424 0.63636,-0.322424 1.31091,-0.54303 0.67454,-0.220606 1.37454,-0.339394 0.7,-0.118788 1.41273,-0.114545 0.71272,0 1.41697,0.101818 0.7,0.110303 1.37878,0.322424 0.67879,0.212121 1.31515,0.534545 0.39879,0.199394 0.77637,0.436969 0.38181,0.237576 0.72969,0.509091 0.35637,0.275757 0.67879,0.585454 0.32242,0.305455 0.61515,0.644848 0.29697,0.339394 0.55152,0.7 0.25878,0.364848 0.47939,0.755151 0.22061,0.381818 0.40303,0.793333 0.18242,0.407272 0.32242,0.831514 0.14425,0.424242 0.24182,0.861212 0.0976,0.432727 0.15697,0.878181 0.0551,0.441212 0.0679,0.890908 0.008,0.445455 -0.0212,0.890909 -0.0297,0.445454 -0.10606,0.882424 -0.0764,0.436969 -0.19515,0.873938 -0.11879,0.43697 -0.27576,0.848485 -0.15697,0.411514 -0.36061,0.814545 -30.01513,60.030262 -60.11511,150.325951",
            fill: "#000000",
            stroke: {
                width: containerToDraw.radius * 0.2,
                color: "#111111"
            }
        })
    },
    "default": (containerToDraw) => {
        petalAssets["basic"](containerToDraw);
    },
}
